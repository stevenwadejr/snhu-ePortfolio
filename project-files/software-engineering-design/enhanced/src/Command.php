<?php

namespace stevenwadejr;

use Closure;
use Exception;
use League\Csv\Reader;
use League\Csv\Statement;
use Symfony\Component\Console\Command\Command as SymfonyCommand;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class Command extends SymfonyCommand
{
    protected InputInterface $input;

    protected OutputInterface $output;

    protected function configure()
    {
        $this->addArgument(
            'csvFile',
            InputArgument::OPTIONAL,
            'CSV of bids to load',
            'eBid_Monthly_Sales_Dec_2016.csv'
        );
    }

    protected function initialize(InputInterface $input, OutputInterface $output)
    {
        $this->input = $input;
        $this->output = $output;
        parent::initialize($input, $output); // TODO: Change the autogenerated stub
    }

    protected function loadBids(Closure $rowCallback, Closure $onCsvReadCallback = null)
    {
        $csvFile = $this->input->getArgument('csvFile');
        $csvPath = $this->getApplication()->getAppDir() . '/' . $csvFile;
        $this->output->writeln('Loading CSV file ' . $csvFile);

        try {
            $reader = Reader::createFromPath($csvPath, 'r');
            $headers = array_map('trim', $reader->fetchOne(0));

            $this->output->writeln(implode(' | ', $headers));

            $resultSet = Statement::create()->offset(1)->process($reader);

            if ($onCsvReadCallback) {
                $onCsvReadCallback($reader, $resultSet);
            }

            foreach ($resultSet->getRecords() as $offset => $record) {
                $bid = new Bid();
                $bid->bidId = $record[1];
                $bid->title = $record[0];
                $bid->fund = $record[8];
                $bid->amount = $this->stringToDouble($record[4]);

                $rowCallback($bid);
            }
        } catch (Exception $e) {
            echo $e->getMessage() . PHP_EOL;
        }
    }

    protected function displayBid(Bid $bid): void
    {
        $this->output->write(
            [
                '<info>',
                $bid->bidId,
                ': ',
                $bid->title,
                ' | ',
                $bid->amount,
                ' | ',
                $bid->fund,
                '</info>',
                PHP_EOL
            ]
        );
    }

    protected function stringToDouble(string $str): float
    {
        return number_format(
            floatval(preg_replace('/[^-0-9\.]/', '', $str)),
            2,
            '.',
            ''
        );
    }
}